require('dotenv').config();

const { createServer } = require('http');

const express = require('express');
const bodyParser = require('body-parser');

const { WebClient } = require('@slack/web-api');
const { createEventAdapter } = require('@slack/events-api');
const { createMessageAdapter } = require('@slack/interactive-messages');

const routes = require('./app/api/route');

const events = require('./app/slack/events');
const actions = require('./app/slack/actions');
const messages = require('./app/slack/messages');
const options = require('./app/slack/options');

const slackSigningSecret = process.env.SLACK_SIGNING_SECRET;
const slackBotToken = process.env.SLACK_BOT_TOKEN;
const port = process.env.PORT || 3000;

const web = new WebClient(slackBotToken);
const slackEvents = createEventAdapter(slackSigningSecret, {includeBody: true});
const slackActions = createMessageAdapter(slackSigningSecret);

// Create an express application
const app = express();

const rawBodyBuffer = (req, res, buf, encoding) => {
    if (buf && buf.length)  req.rawBody = buf.toString(encoding|| 'utf8');
};

// Plug the adapter in as a middleware
app.use('/slack/events', slackEvents.expressMiddleware());
app.use('/slack/actions', slackActions.requestListener());
app.use(bodyParser.json({ verify: rawBodyBuffer }));

// Handle all incoming messages, events and actions from Slack.
events.handle(slackEvents, web);
actions.handle(slackActions, web);
messages.handle(slackEvents, web);
options.handle(slackActions, web);

const server = createServer(app);
routes(app);

server.listen(port, () => {
    // Log a message when the server is ready
    console.log(`Listening for events on ${server.address().port}`);
});